// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: greet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

/** proto buffer syntax */

/** Request and Response Schema */
export interface GreetRequest {
  firstName: string;
  lastName: string;
  age: number;
}

export interface GreetResponse {
  result: string;
}

function createBaseGreetRequest(): GreetRequest {
  return { firstName: "", lastName: "", age: 0 };
}

export const GreetRequest: MessageFns<GreetRequest> = {
  encode(message: GreetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.age !== 0) {
      writer.uint32(24).int32(message.age);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GreetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGreetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GreetRequest {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
    };
  },

  toJSON(message: GreetRequest): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GreetRequest>, I>>(base?: I): GreetRequest {
    return GreetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GreetRequest>, I>>(object: I): GreetRequest {
    const message = createBaseGreetRequest();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.age = object.age ?? 0;
    return message;
  },
};

function createBaseGreetResponse(): GreetResponse {
  return { result: "" };
}

export const GreetResponse: MessageFns<GreetResponse> = {
  encode(message: GreetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GreetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGreetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GreetResponse {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: GreetResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GreetResponse>, I>>(base?: I): GreetResponse {
    return GreetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GreetResponse>, I>>(object: I): GreetResponse {
    const message = createBaseGreetResponse();
    message.result = object.result ?? "";
    return message;
  },
};

/** Server Methods Schema */
export type GreetServiceService = typeof GreetServiceService;
export const GreetServiceService = {
  greet: {
    path: "/GreetService/greet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GreetRequest) => Buffer.from(GreetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GreetRequest.decode(value),
    responseSerialize: (value: GreetResponse) => Buffer.from(GreetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GreetResponse.decode(value),
  },
} as const;

export interface GreetServiceServer extends UntypedServiceImplementation {
  greet: handleUnaryCall<GreetRequest, GreetResponse>;
}

export interface GreetServiceClient extends Client {
  greet(
    request: GreetRequest,
    callback: (error: ServiceError | null, response: GreetResponse) => void,
  ): ClientUnaryCall;
  greet(
    request: GreetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GreetResponse) => void,
  ): ClientUnaryCall;
  greet(
    request: GreetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GreetResponse) => void,
  ): ClientUnaryCall;
}

export const GreetServiceClient = makeGenericClientConstructor(GreetServiceService, "GreetService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GreetServiceClient;
  service: typeof GreetServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
