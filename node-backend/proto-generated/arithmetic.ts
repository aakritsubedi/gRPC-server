// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: arithmetic.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

/** Proto Buffer Version */

/** Client Request Body */
export interface ArithmeticRequest {
  num1: number;
  num2: number;
}

/** Server Response Body */
export interface ArithmeticResponse {
  result: number;
}

function createBaseArithmeticRequest(): ArithmeticRequest {
  return { num1: 0, num2: 0 };
}

export const ArithmeticRequest: MessageFns<ArithmeticRequest> = {
  encode(message: ArithmeticRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num1 !== 0) {
      writer.uint32(9).double(message.num1);
    }
    if (message.num2 !== 0) {
      writer.uint32(17).double(message.num2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArithmeticRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArithmeticRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.num1 = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.num2 = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArithmeticRequest {
    return {
      num1: isSet(object.num1) ? globalThis.Number(object.num1) : 0,
      num2: isSet(object.num2) ? globalThis.Number(object.num2) : 0,
    };
  },

  toJSON(message: ArithmeticRequest): unknown {
    const obj: any = {};
    if (message.num1 !== 0) {
      obj.num1 = message.num1;
    }
    if (message.num2 !== 0) {
      obj.num2 = message.num2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArithmeticRequest>, I>>(base?: I): ArithmeticRequest {
    return ArithmeticRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArithmeticRequest>, I>>(object: I): ArithmeticRequest {
    const message = createBaseArithmeticRequest();
    message.num1 = object.num1 ?? 0;
    message.num2 = object.num2 ?? 0;
    return message;
  },
};

function createBaseArithmeticResponse(): ArithmeticResponse {
  return { result: 0 };
}

export const ArithmeticResponse: MessageFns<ArithmeticResponse> = {
  encode(message: ArithmeticResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(9).double(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArithmeticResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArithmeticResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.result = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArithmeticResponse {
    return { result: isSet(object.result) ? globalThis.Number(object.result) : 0 };
  },

  toJSON(message: ArithmeticResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArithmeticResponse>, I>>(base?: I): ArithmeticResponse {
    return ArithmeticResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArithmeticResponse>, I>>(object: I): ArithmeticResponse {
    const message = createBaseArithmeticResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

/** Server Methods Schema */
export type ArithmeticService = typeof ArithmeticService;
export const ArithmeticService = {
  add: {
    path: "/Arithmetic/add",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ArithmeticRequest) => Buffer.from(ArithmeticRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ArithmeticRequest.decode(value),
    responseSerialize: (value: ArithmeticResponse) => Buffer.from(ArithmeticResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ArithmeticResponse.decode(value),
  },
  subtract: {
    path: "/Arithmetic/subtract",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ArithmeticRequest) => Buffer.from(ArithmeticRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ArithmeticRequest.decode(value),
    responseSerialize: (value: ArithmeticResponse) => Buffer.from(ArithmeticResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ArithmeticResponse.decode(value),
  },
  multiply: {
    path: "/Arithmetic/multiply",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ArithmeticRequest) => Buffer.from(ArithmeticRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ArithmeticRequest.decode(value),
    responseSerialize: (value: ArithmeticResponse) => Buffer.from(ArithmeticResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ArithmeticResponse.decode(value),
  },
  divide: {
    path: "/Arithmetic/divide",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ArithmeticRequest) => Buffer.from(ArithmeticRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ArithmeticRequest.decode(value),
    responseSerialize: (value: ArithmeticResponse) => Buffer.from(ArithmeticResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ArithmeticResponse.decode(value),
  },
} as const;

export interface ArithmeticServer extends UntypedServiceImplementation {
  add: handleUnaryCall<ArithmeticRequest, ArithmeticResponse>;
  subtract: handleUnaryCall<ArithmeticRequest, ArithmeticResponse>;
  multiply: handleUnaryCall<ArithmeticRequest, ArithmeticResponse>;
  divide: handleUnaryCall<ArithmeticRequest, ArithmeticResponse>;
}

export interface ArithmeticClient extends Client {
  add(
    request: ArithmeticRequest,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  add(
    request: ArithmeticRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  add(
    request: ArithmeticRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  subtract(
    request: ArithmeticRequest,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  subtract(
    request: ArithmeticRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  subtract(
    request: ArithmeticRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  multiply(
    request: ArithmeticRequest,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  multiply(
    request: ArithmeticRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  multiply(
    request: ArithmeticRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  divide(
    request: ArithmeticRequest,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  divide(
    request: ArithmeticRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
  divide(
    request: ArithmeticRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ArithmeticResponse) => void,
  ): ClientUnaryCall;
}

export const ArithmeticClient = makeGenericClientConstructor(ArithmeticService, "Arithmetic") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ArithmeticClient;
  service: typeof ArithmeticService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
