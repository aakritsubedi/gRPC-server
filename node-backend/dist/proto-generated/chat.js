"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: chat.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatServiceClient = exports.ChatServiceService = exports.ChatResponse = exports.ChatRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "";
function createBaseChatRequest() {
    return { question: "" };
}
exports.ChatRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.question !== "") {
            writer.uint32(10).string(message.question);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.question = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { question: isSet(object.question) ? globalThis.String(object.question) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.question !== "") {
            obj.question = message.question;
        }
        return obj;
    },
    create(base) {
        return exports.ChatRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseChatRequest();
        message.question = (_a = object.question) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseChatResponse() {
    return { message: "", type: "" };
}
exports.ChatResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return exports.ChatResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseChatResponse();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
exports.ChatServiceService = {
    chat: {
        path: "/ChatService/chat",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.ChatRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.ChatRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ChatResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ChatResponse.decode(value),
    },
};
exports.ChatServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ChatServiceService, "ChatService");
function isSet(value) {
    return value !== null && value !== undefined;
}
