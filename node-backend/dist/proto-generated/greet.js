"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: greet.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GreetServiceClient = exports.GreetServiceService = exports.GreetResponse = exports.GreetRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "";
function createBaseGreetRequest() {
    return { firstName: "", lastName: "", age: 0 };
}
exports.GreetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(18).string(message.lastName);
        }
        if (message.age !== 0) {
            writer.uint32(24).int32(message.age);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGreetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.age = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            age: isSet(object.age) ? globalThis.Number(object.age) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.age !== 0) {
            obj.age = Math.round(message.age);
        }
        return obj;
    },
    create(base) {
        return exports.GreetRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGreetRequest();
        message.firstName = (_a = object.firstName) !== null && _a !== void 0 ? _a : "";
        message.lastName = (_b = object.lastName) !== null && _b !== void 0 ? _b : "";
        message.age = (_c = object.age) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseGreetResponse() {
    return { result: "" };
}
exports.GreetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGreetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.GreetResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGreetResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.GreetServiceService = {
    greet: {
        path: "/GreetService/greet",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GreetRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GreetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.GreetResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.GreetResponse.decode(value),
    },
};
exports.GreetServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.GreetServiceService, "GreetService");
function isSet(value) {
    return value !== null && value !== undefined;
}
